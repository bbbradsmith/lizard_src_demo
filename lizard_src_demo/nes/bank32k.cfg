MEMORY {
	ZP:       start = $00,   size = $100,  type = rw, file = "";
	STACK:    start = $100,  size = $100,  type = rw, file = "";
	BSS:      start = $200,  size = $600,  type = rw, file = "";
	PRG:      start = $8000, size = $8000, type = ro, file = %O, fill = yes, fillval = $00;
}

SEGMENTS {
	ZEROPAGE: load = ZP,     type = zp;
	STACK:    load = STACK,  type = bss;
	OAM:      load = BSS,    type = bss, start = $200;
	RAM:      load = BSS,    type = bss;
	TEXT:     load = PRG,    type = ro,  start = $8000, optional = yes;
	ALIGNED:  load = PRG,    type = ro,  start = $A800, optional = yes; # see below
	CHR:      load = PRG,    type = ro,  align =  $10,  optional = yes;
	SPRITE:   load = PRG,    type = ro,                 optional = yes;
	PALETTE:  load = PRG,    type = ro,                 optional = yes;
	ROOM:     load = PRG,    type = ro,                 optional = yes;
	MUSIC:    load = PRG,    type = ro,                 optional = yes;
	DATA:     load = PRG,    type = ro,                 optional = yes;
	CODE:     load = PRG,    type = ro,                 optional = yes;
	FIXED:    load = PRG,    type = ro,  start = $FF94;
	VECTORS:  load = PRG,    type = ro,  start = $FFFA;
}

# Notes:
# ALIGNED start determines total space available for TEXT
# - should match TEXT_RESERVD in text_export.py
# - there is roughly $C0 bytes of code in ALIGNED which must fit on a single page
# CHR does not need to be aligned, but it was nice to 16-byte align for a graphical ROM visualization
